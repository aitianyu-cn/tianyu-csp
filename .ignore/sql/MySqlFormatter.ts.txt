/** @format */

import { StringHelper } from "@aitianyu.cn/types";
import { SqlInStruct } from "./Sql";

export function formatForMySql(source: SqlInStruct): string {
    switch (source.operate) {
        case "select":
            return formatSelect(source);
        case "insert":
            return formatInsert(source);
        case "update":
            return formatUpdate(source);
        case "delete":
            return formatDelete(source);
        case "truncate":
            return formatTruncate(source);
    }
}

function formatSelect(source: SqlInStruct): string {
    const baseSql = `SELECT${source.options?.distinct ? " DISTINCT" : ""} {0} FROM \`${source.database}\`.\`${source.table}\``;
    const seletedCols = !source.pairs.length
        ? "*"
        : source.pairs
              .map(
                  (col) =>
                      (isFunction(col.col) ? "" : "`" + source.table + "`.`") + col.col + (col.rename ? "AS " + col.rename : ""),
              )
              .join(", ");

    const seletion = StringHelper.format(baseSql, seletedCols);
    const condition = conditionGeneration(source);
    const order = orderGeneration(source);
    const join = joinGeneration(source);
    const union = unionGeneration(source);

    return (
        seletion +
        (condition ? " WHERE " + condition : "") +
        (join ? " " + join : "") +
        (order ? " " + order : "") +
        (union ? " " + union : "") +
        ";"
    );
}

function formatInsert(source: SqlInStruct): string {
    const baseSql = `INSERT INTO \`${source.database}\`.\`${source.table}\` ({0}) VALUES({1});`;

    const cols: string[] = [];
    const values: string[] = [];
    for (const item of source.pairs) {
        cols.push("`" + item.col + "`");
        values.push(typeof item.value === "number" ? item.value.toString() : `'${item.value}'`);
    }

    return StringHelper.format(baseSql, [cols.join(", "), values.join(", ")]);
}

function formatUpdate(source: SqlInStruct): string {
    const baseSql = `UPDATE \`${source.database}\`.\`${source.table}\``;

    const valueSets: string[] = [];
    for (const item of source.pairs) {
        valueSets.push(`\`${item.col}\` = ${typeof item.value === "number" ? item.value : `'${item.value}'`}`);
    }

    const condition = conditionGeneration(source);

    return `${baseSql} SET ${valueSets.join(", ")}${condition ? " WHERE " + condition : ""};`;
}

function formatDelete(source: SqlInStruct): string {
    const baseSql = `DELETE FROM \`${source.database}\`.\`${source.table}\``;
    const condition = conditionGeneration(source);

    return `${baseSql}${condition ? " WHERE" + condition : ""};`;
}

function formatTruncate(source: SqlInStruct): string {
    return `TRUNCATE TABLE \`${source.database}\`.\`${source.table}\`;`;
}

function conditionGeneration(source: SqlInStruct): string {
    //
}

function joinGeneration(source: SqlInStruct): string {
    //
}

function unionGeneration(source: SqlInStruct): string {
    //
}

function orderGeneration(source: SqlInStruct): string {
    const orderType = source.options?.order?.type || "";
    const orderCol = source.options?.order?.cols.length
        ? `ORDER BY ${source.options?.order?.cols.map((col) => "`" + col + "`").join(", ")}`
        : "";
    const order = `${orderCol} ${orderType}`.trim();
    return order;
}

function isFunction(col: string): boolean {}
